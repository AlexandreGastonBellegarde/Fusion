// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// data structure of Particles/Vertices
struct PointElement {
	// TODO: change the Point Element structure when needed
	float3 worldPosition;
	float3 worldVelocity;
	float invMass;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//RWTexture2D<float4> Result;

RWStructuredBuffer<PointElement> pointElements;

float deltaTime;

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

	// read current particles from buffer
	PointElement p = pointElements[id.x];
	// define gravity
	float3 gravityAccel = float3(0, -9.8, 0);
	// read position & velocity
	float3 position = p.worldPosition;
	float3 velocity = p.worldVelocity;
	// update position & velocity
	velocity += gravityAccel * deltaTime;
	position += velocity * deltaTime;
	// write updated data back
	pointElements[id.x].worldPosition = position;
	pointElements[id.x].worldVelocity = velocity;

}
